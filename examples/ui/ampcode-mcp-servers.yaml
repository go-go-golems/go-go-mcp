name: ampcode-mcp-servers
short: Manage AmpCode MCP servers
long: |
  This command allows you to enable or disable MCP servers for AmpCode, which are stored
  in the AmpCode configuration file located at ~/.config/Cursor/User/settings.json.

  You can toggle the 'disabled' flag for each configured MCP server.

components:
  - title:
      content: AmpCode MCP Server Management
  
  - text:
      content: Enable or disable MCP servers for AmpCode. Changes will be saved to ~/.config/Cursor/User/settings.json.

  - form:
      id: load-servers-form
      components:
        - button:
            id: load-servers-btn
            text: Load Current Configuration
            type: primary

shell-script: |
  #!/bin/bash
  set -euo pipefail
  
  CONFIG_FILE="$HOME/.config/Cursor/User/settings.json"
  
  # Check if the config file exists
  if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "❌ Error: Configuration file not found at $CONFIG_FILE"
    exit 1
  fi
  
  # Function to load the current configuration
  function load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
      # Check if jq is installed
      if ! command -v jq &> /dev/null; then
        echo "❌ Error: jq is required but not installed. Please install jq to manage AmpCode MCP servers."
        exit 1
      fi
      
      # Extract MCP servers configuration
      MCP_SERVERS=$(jq -r '."amp.mcpServers" // {}' "$CONFIG_FILE")
      
      # Generate components for the MCP servers
      COMPONENTS=$(cat <<EOF
      components:
        - title:
            content: AmpCode MCP Server Configuration
        
        - text:
            content: Enable or disable MCP servers for AmpCode.
        
        - form:
            id: mcp-servers-form
            components:
      EOF
      )
      
      # Check if we have any MCP servers configured
      SERVER_COUNT=$(echo "$MCP_SERVERS" | jq 'length')
      
      if [[ "$SERVER_COUNT" -eq 0 ]]; then
        COMPONENTS+=$(cat <<EOF
              - text:
                  content: No MCP servers configured in AmpCode.
        EOF
        )
      else
        # Add a list of servers with checkboxes for each
        COMPONENTS+=$(cat <<EOF
              - list:
                  type: ul
                  items:
      EOF
        )
        
        # Loop through each server and add a checkbox
        SERVER_NAMES=$(echo "$MCP_SERVERS" | jq -r 'keys[]')
        
        for SERVER in $SERVER_NAMES; do
          # Get the disabled status (defaults to false if not present)
          IS_DISABLED=$(echo "$MCP_SERVERS" | jq -r ".[\"$SERVER\"].disabled // false")
          
          # Invert the disabled flag to get the enabled status for the checkbox
          if [[ "$IS_DISABLED" == "true" ]]; then
            IS_ENABLED="false"
          else
            IS_ENABLED="true"
          fi
          
          # Get the command and args for display
          COMMAND=$(echo "$MCP_SERVERS" | jq -r ".[\"$SERVER\"].command // \"unknown\"")
          ARGS=$(echo "$MCP_SERVERS" | jq -r ".[\"$SERVER\"].args // [] | join(\" \")")
          
          COMPONENTS+=$(cat <<EOF
                    - checkbox:
                        id: server-$SERVER
                        label: "$SERVER ($COMMAND $ARGS)"
                        checked: $IS_ENABLED
                        name: server-$SERVER
      EOF
          )
        done
        
        # Add a submit button
        COMPONENTS+=$(cat <<EOF
              - button:
                  id: save-servers-btn
                  text: Save Configuration
                  type: primary
      EOF
        )
      fi
      
      # Add a refresh button
      COMPONENTS+=$(cat <<EOF
              - button:
                  id: refresh-btn
                  text: Refresh
                  type: secondary
      EOF
      )
      
      # Return the generated components
      echo "$COMPONENTS"
    else
      echo "❌ Error: Configuration file not found at $CONFIG_FILE"
      exit 1
    fi
  }
  
  # Function to save the updated configuration
  function save_config() {
    # Get all form inputs
    SERVER_NAMES=$(echo "$MCP_SERVERS" | jq -r 'keys[]')
    
    # Create a temporary file for the updated config
    TEMP_CONFIG=$(mktemp)
    
    # Read the entire config file
    CONFIG_CONTENT=$(cat "$CONFIG_FILE")
    
    # For each server, update its disabled status based on the checkbox value
    for SERVER in $SERVER_NAMES; do
      # Get the checkbox value (enabled status)
      IS_ENABLED="{{ index .FormData (printf \"server-%s\" \"$SERVER\") }}"
      
      # If the checkbox is checked, the server should be enabled (disabled=false)
      # If the checkbox is unchecked, the server should be disabled (disabled=true)
      if [[ "$IS_ENABLED" == "true" ]]; then
        IS_DISABLED="false"
      else
        IS_DISABLED="true"
      fi
      
      # Update the configuration using jq
      CONFIG_CONTENT=$(echo "$CONFIG_CONTENT" | jq ".\"amp.mcpServers\".[\"$SERVER\"].disabled = $IS_DISABLED")
    done
    
    # Write the updated configuration to the temp file
    echo "$CONFIG_CONTENT" > "$TEMP_CONFIG"
    
    # Backup the original config
    cp "$CONFIG_FILE" "${CONFIG_FILE}.bak"
    
    # Replace the original config with the updated one
    mv "$TEMP_CONFIG" "$CONFIG_FILE"
    
    echo "✅ Configuration saved successfully!"
    
    # Load the updated configuration
    load_config
  }
  
  # Main script logic
  case "{{ .ClickedButtonID }}" in
    "load-servers-btn" | "refresh-btn")
      load_config
      ;;
    "save-servers-btn")
      save_config
      ;;
    *)
      load_config
      ;;
  esac