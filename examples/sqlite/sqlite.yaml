name: sqlite
short: Execute SQL commands on a SQLite database
long: |
  This tool allows you to execute SQL commands on a SQLite database file.
  You can run queries, view schema information, or perform database operations.
  
  If you don't specify a database file with --db, the tool will use the database
  previously opened with the sql-open command.
  
  Examples:
  - List all tables: go-go-mcp run-command sqlite.yaml --db my.db --sql ".tables"
  - Run a query: go-go-mcp run-command sqlite.yaml --db my.db --sql "SELECT * FROM users"
  - Export as CSV: go-go-mcp run-command sqlite.yaml --db my.db --sql "SELECT * FROM users" --csv
  - Use previously opened database: go-go-mcp run-command sqlite.yaml --sql "SELECT * FROM users"

flags:
  - name: db
    type: string
    help: Path to the SQLite database file (optional if previously opened with sql-open)
    required: false
  - name: sql
    type: string
    help: SQL command to execute
    required: true
  - name: csv
    type: bool
    help: Output results in CSV format
    default: false
  - name: headers
    type: bool
    help: Show column headers in output
    default: true
  - name: timeout
    type: int
    help: Query timeout in seconds
    default: 30

shell-script: |
  #!/bin/bash
  set -euo pipefail
  
  # Check if sqlite3 is installed
  if ! command -v sqlite3 &> /dev/null; then
    echo "Error: sqlite3 command not found. Please install SQLite." >&2
    exit 1
  fi
  
  # Determine which database file to use
  DB_FILE="{{ if .Args.db }}{{ .Args.db }}{{ end }}"
  if [[ -z "$DB_FILE" ]]; then
    if [[ -f "/tmp/db-name.txt" ]]; then
      DB_FILE=$(cat /tmp/db-name.txt)
      echo "Using database from sql-open: $DB_FILE"
    else
      echo "Error: No database specified and no previously opened database found." >&2
      echo "Please specify a database with --db or use sql-open first." >&2
      exit 1
    fi
  fi
  
  # Check if database file exists
  if [[ ! -f "$DB_FILE" ]]; then
    echo "Warning: Database file '$DB_FILE' does not exist. It will be created if you execute a CREATE statement." >&2
  fi
  
  # Escape the SQL command by writing it to a temporary file
  SQL_FILE=$(mktemp)
  trap 'rm -f "$SQL_FILE"' EXIT
  
  # Write the SQL command to the temporary file
  echo "{{ .Args.sql }}" > "$SQL_FILE"
  
  # Build sqlite3 command with options
  CMD="sqlite3"
  
  # Set timeout
  CMD+=" -cmd '.timeout {{ .Args.timeout }}000'"
  
  # Configure output format
  if [[ "{{ .Args.csv }}" == "true" ]]; then
    CMD+=" -csv"
  else
    CMD+=" -column"
  fi
  
  # Show headers if requested
  if [[ "{{ .Args.headers }}" == "true" ]]; then
    CMD+=" -header"
  fi
  
  # Add database file
  CMD+=" '$DB_FILE'"
  
  # Use the SQL file instead of passing the SQL directly
  CMD+=" < '$SQL_FILE'"
  
  # Execute the command
  echo "Executing SQL from temporary file: $SQL_FILE"
  eval $CMD 