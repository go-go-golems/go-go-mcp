name: html-extraction
short: Extract data from HTML using selectors
long: |
  Extract data from HTML documents using CSS or XPath selectors.
  IMPORTANT: Run get-html-extraction-tutorial first to understand how to create selector configurations.
  NEVER RUN THIS TOOL WITHOUT HAVING READ THE TUTORIAL FIRST.

flags:
  - name: config
    type: string
    help: YAML configuration string containing selectors and extraction rules
    required: true
  - name: urls
    type: stringList
    help: List of URLs to extract data from
    required: true
  - name: show_context
    type: bool
    help: Show context around matches
    default: false
  - name: show_path
    type: bool
    help: Show element path in results
    default: false

shell-script: |
  #!/bin/bash
  set -euo pipefail

  # Create temporary config file
  CONFIG_FILE=$(mktemp)
  trap 'rm -f "$CONFIG_FILE"' EXIT

  # Generate config file with heredoc to handle special characters better
  cat > "$CONFIG_FILE" << 'EOL'
  {{ .Args.config }}
  EOL

  # Log config file with timestamp for replay
  LOG_FILE="/tmp/html-extraction-$(date '+%Y-%m-%d-%H-%M-%S').yaml"
  cp "$CONFIG_FILE" "$LOG_FILE"

  html-selector select \
    --urls {{ range .Args.urls }}{{ . }} {{ end }} \
    --config "$CONFIG_FILE" \
    {{ if .Args.show_context }}--show-context{{ end }} \
    {{ if .Args.show_path }}--show-path{{ end }} \