package main

import (
	"fmt"
	"gopkg.in/yaml.v3"
	"strings"
	"github.com/rs/zerolog/log"
	"github.com/go-go-golems/go-go-mcp/pkg/server/ui"
)

templ base(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<script src="https://unpkg.com/htmx.org@2.0.4" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx-ext-sse@2.2.2" crossorigin="anonymous"></script>
			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"/>
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
			<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css"/>
			<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
			<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/yaml.min.js"></script>
			<script>
				document.addEventListener('DOMContentLoaded', (event) => {
					document.querySelectorAll('pre code').forEach((el) => {
						hljs.highlightElement(el);
					});

					// Add click handlers to all form buttons
					document.querySelectorAll('form button').forEach(button => {
						button.addEventListener('click', function(e) {
							this.form._lastClickedButton = this.id;
						});
					});
				});

				function logToConsole(message) {
					const console = document.getElementById('interaction-console');
					const entry = document.createElement('div');
					entry.className = 'console-entry';
					entry.textContent = message;
					console.appendChild(entry);
					console.scrollTop = console.scrollHeight;
					if (console.children.length > 50) {
						console.removeChild(console.firstChild);
					}
				}

				function sendUIAction(componentId, action, data = {}) {
					// Get the request ID from the page if it exists
					const requestId = document.querySelector('[data-request-id]')?.getAttribute('data-request-id') || '';
					
					logToConsole(`Component ${componentId} ${action}${requestId ? ' (request: ' + requestId + ')' : ''}`);
					
					// If this is a form submission, collect all form data
					if (action === 'submitted' && document.getElementById(componentId)) {
						const form = document.getElementById(componentId);
						const formData = new FormData(form);
						const formValues = {};
						
						// Convert FormData to a plain object
						for (const [key, value] of formData.entries()) {
							formValues[key] = value;
						}
						
						// Add checkbox values (FormData doesn't include unchecked boxes)
						form.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
							formValues[checkbox.id] = checkbox.checked;
						});
						
						// Add all input values by ID (in case name attributes are missing)
						form.querySelectorAll('input:not([type="checkbox"]), textarea, select').forEach(input => {
							if (input.id) {
								formValues[input.id] = input.value;
							}
						});
						
						// Add the clicked button info if available
						if (form._lastClickedButton) {
							formValues['_clicked_button'] = form._lastClickedButton;
						}
						
						// Merge with any existing data
						data = { ...data, formData: formValues };
						
						// Log form submission for debugging
						console.log('Form submission data:', formValues);
						logToConsole(`Form ${componentId} submitted with data`);
					}
					
					fetch('/api/ui-action', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							componentId: componentId,
							action: action,
							data: data,
							requestId: requestId // Include the request ID in the action data
						})
					})
					.then(response => response.json())
					.then(data => {
						console.log('Action response:', data);
					})
					.catch(error => {
						console.error('Error sending action:', error);
						logToConsole(`Error sending action: ${error.message}`);
					});
				}
			</script>
			<style>
				.source-yaml {
					background-color: #f8f9fa;
					border-radius: 6px;
					padding: 15px;
					margin-bottom: 20px;
				}
				pre {
					margin: 0;
				}
				#interaction-console {
					position: fixed;
					bottom: 0;
					left: 0;
					right: 0;
					height: 150px;
					background: #2d2d2d;
					color: #fff;
					font-family: monospace;
					padding: 10px;
					overflow-y: auto;
					z-index: 1000;
					border-top: 2px solid #444;
				}
				#interaction-console .console-entry {
					margin: 5px 0;
					white-space: pre-wrap;
				}
				.console-spacer {
					height: 170px;
				}
				.list-group-item {
					border: none;
					padding: 0.5rem 1rem;
				}
				.list-group .list-group {
					margin-top: 0.5rem;
					margin-left: 1rem;
				}
				.list-group-item > :first-child {
					font-weight: bold;
					margin-bottom: 0.25rem;
				}
				form {
					padding: 1rem;
					background-color: #f8f9fa;
					border-radius: 0.5rem;
				}
				form > * {
					margin-bottom: 1.25rem;
				}
				form > :last-child {
					margin-bottom: 0;
				}
				form h1 {
					margin-bottom: 1.5rem;
					font-size: 1.75rem;
				}
				.form-check {
					margin: 1rem 0;
					padding-left: 2rem;
				}
				.form-check-input {
					margin-left: -2rem;
				}
			</style>
		</head>
		<body class="container py-4">
			<nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
				<div class="container-fluid">
					<a class="navbar-brand" href="/">UI Server</a>
				</div>
			</nav>
			{ children... }
			<div class="console-spacer"></div>
			<div id="interaction-console"></div>
		</body>
	</html>
}

templ indexTemplate(pages map[string]ui.UIDefinition) {
	@base("UI Server - Index") {
		<div class="row">
			<div class="col">
				<h1>Available Pages</h1>
				<div class="list-group">
					for name := range pages {
						<a href={ templ.SafeURL("/pages/" + strings.TrimSuffix(name, ".yaml")) } class="list-group-item list-group-item-action">
							{ name }
						</a>
					}
				</div>
			</div>
		</div>
	}
}

templ pageTemplate(name string, def ui.UIDefinition) {
	@base("UI Server - " + name) {
		<div
			hx-ext="sse"
			sse-connect={ "/sse?page=" + name }
			sse-swap="page-content-update"
		>
			@pageContentTemplate(name, def)
		</div>
	}
}

templ pageContentTemplate(name string, def ui.UIDefinition) {
	<div class="row">
		<div class="col-md-6">
			<div class="card mb-4">
				<div class="card-header">
					<h5 class="card-title mb-0">Rendered UI</h5>
				</div>
				<div class="card-body" data-request-id={ def.RequestID }>
					for _, component := range def.Components {
						for typ, props := range component {
							@renderComponent(typ, props.(map[string]interface{}))
						}
					}
				</div>
			</div>
		</div>
		<div class="col-md-6">
			<div class="card">
				<div class="card-header">
					<h5 class="card-title mb-0">YAML Source</h5>
				</div>
				<div class="card-body source-yaml">
					<pre><code class="language-yaml">{ yamlString(def) }</code></pre>
				</div>
			</div>
		</div>
	</div>
	<script>
		// Decode HTML entities in pre/code blocks
		document.addEventListener('htmx:afterSwap', function(event) {
			document.querySelectorAll('pre code').forEach((el) => {
				// Replace HTML newline entities with actual newlines
				el.innerHTML = el.innerHTML.replace(/&#10;/g, '\n');
				// Re-highlight the code
				hljs.highlightElement(el);
			});
		});
	</script>
}

templ renderComponent(typ string, props map[string]interface{}) {
	switch typ {
		case "button":
			if id, ok := props["id"].(string); ok {
				<div id={ fmt.Sprintf("component-%s", id) }>
					<button
						id={ id }
						data-hx-on:click={ fmt.Sprintf("sendUIAction('%s', 'clicked')", id) }
						if disabled, ok := props["disabled"].(bool); ok && disabled {
							disabled="disabled"
						}
						class={
							"btn",
							templ.KV("btn-primary", props["type"] == "primary"),
							templ.KV("btn-secondary", props["type"] == "secondary"),
							templ.KV("btn-danger", props["type"] == "danger"),
							templ.KV("btn-success", props["type"] == "success"),
						}
					>
						if text, ok := props["text"].(string); ok {
							{ text }
						}
					</button>
				</div>
			}
		case "title":
			if id, ok := props["id"].(string); ok {
				<div id={ fmt.Sprintf("component-%s", id) }>
					<h1
						id={ id }
						data-hx-on:click={ fmt.Sprintf("sendUIAction('%s', 'clicked')", id) }
					>
						if content, ok := props["content"].(string); ok {
							{ content }
						}
					</h1>
				</div>
			}
		case "text":
			if id, ok := props["id"].(string); ok {
				<div id={ fmt.Sprintf("component-%s", id) }>
					<p
						id={ id }
						data-hx-on:click={ fmt.Sprintf("sendUIAction('%s', 'clicked')", id) }
					>
						if content, ok := props["content"].(string); ok {
							{ content }
						}
					</p>
				</div>
			}
		case "input":
			if id, ok := props["id"].(string); ok {
				<div id={ fmt.Sprintf("component-%s", id) }>
					<input
						id={ id }
						data-hx-on:change={ fmt.Sprintf("sendUIAction('%s', 'changed', {value: this.value})", id) }
						data-hx-on:focus={ fmt.Sprintf("sendUIAction('%s', 'focused')", id) }
						data-hx-on:blur={ fmt.Sprintf("sendUIAction('%s', 'blurred')", id) }
						if typ, ok := props["type"].(string); ok {
							type={ typ }
						}
						if placeholder, ok := props["placeholder"].(string); ok {
							placeholder={ placeholder }
						}
						if value, ok := props["value"].(string); ok {
							value={ value }
						}
						if required, ok := props["required"].(bool); ok && required {
							required="required"
						}
						if name, ok := props["id"].(string); ok {
							name={ name }
						}
						class="form-control"
					/>
				</div>
			}
		case "textarea":
			if id, ok := props["id"].(string); ok {
				<div id={ fmt.Sprintf("component-%s", id) }>
					<textarea
						id={ id }
						data-hx-on:change={ fmt.Sprintf("sendUIAction('%s', 'changed', {value: this.value})", id) }
						data-hx-on:focus={ fmt.Sprintf("sendUIAction('%s', 'focused')", id) }
						data-hx-on:blur={ fmt.Sprintf("sendUIAction('%s', 'blurred')", id) }
						if rows, ok := props["rows"].(int); ok {
							rows={ fmt.Sprint(rows) }
						}
						if cols, ok := props["cols"].(int); ok {
							cols={ fmt.Sprint(cols) }
						}
						if placeholder, ok := props["placeholder"].(string); ok {
							placeholder={ placeholder }
						}
						class="form-control"
					>
						if value, ok := props["value"].(string); ok {
							{ value }
						}
					</textarea>
				</div>
			}
		case "checkbox":
			if id, ok := props["id"].(string); ok {
				<div id={ fmt.Sprintf("component-%s", id) }>
					<div class="form-check">
						<input
							type="checkbox"
							id={ id }
							data-hx-on:change={ fmt.Sprintf("sendUIAction('%s', 'changed', {checked: this.checked})", id) }
							if name, ok := props["name"].(string); ok {
								name={ name }
							}
							if checked, ok := props["checked"].(bool); ok && checked {
								checked="checked"
							}
							if required, ok := props["required"].(bool); ok && required {
								required="required"
							}
							class="form-check-input"
						/>
						if label, ok := props["label"].(string); ok {
							<label class="form-check-label" for={ id }>{ label }</label>
						}
					</div>
				</div>
			}
		case "list":
			if typ, ok := props["type"].(string); ok {
				if id, ok := props["id"].(string); ok {
					<div id={ fmt.Sprintf("component-%s", id) }>
						if title, ok := props["title"].(string); ok {
							<h4 class="mb-3">{ title }</h4>
						}
						if typ == "ul" {
							<ul class="list-group list-group-flush">
								if items, ok := props["items"].([]interface{}); ok {
									for _, item := range items {
										<li class="list-group-item">
											switch i := item.(type) {
												case string:
													{ i }
												case map[string]interface{}:
													for typ, props := range i {
														@renderComponent(typ, props.(map[string]interface{}))
													}
											}
										</li>
									}
								}
							</ul>
						} else if typ == "ol" {
							<ol class="list-group list-group-numbered list-group-flush">
								if items, ok := props["items"].([]interface{}); ok {
									for _, item := range items {
										<li class="list-group-item">
											switch i := item.(type) {
												case string:
													{ i }
												case map[string]interface{}:
													for typ, props := range i {
														@renderComponent(typ, props.(map[string]interface{}))
													}
											}
										</li>
									}
								}
							</ol>
						}
					</div>
				}
			}
		case "form":
			if id, ok := props["id"].(string); ok {
				<div id={ fmt.Sprintf("component-%s", id) }>
					<form
						id={ id }
						data-hx-on:submit={ fmt.Sprintf("event.preventDefault(); sendUIAction('%s', 'submitted')", id) }
						class="needs-validation"
						novalidate
					>
						if components, ok := props["components"].([]interface{}); ok {
							for _, comp := range components {
								if c, ok := comp.(map[string]interface{}); ok {
									for typ, props := range c {
										@renderComponent(typ, props.(map[string]interface{}))
									}
								}
							}
						}
					</form>
				</div>
			}
	}
}

func yamlString(def ui.UIDefinition) string {
	yamlBytes, err := yaml.Marshal(def)
	if err != nil {
		errMsg := fmt.Sprintf("Error marshaling YAML: %v", err)
		log.Error().Err(err).Msg(errMsg)
		return errMsg
	}
	log.Debug().Int("length", len(yamlBytes)).Msg("Generated YAML string")
	return string(yamlBytes)
}

templ uiUpdateTemplate() {
	@base("Dynamic UI") {
		<div class="row">
			<div class="col">
				<div class="card">
					<div class="card-header">
						<h5 class="card-title mb-0">Dynamic UI</h5>
					</div>
					<div class="card-body"
						hx-ext="sse"
						sse-connect="/sse?page=ui-update"
						sse-swap="ui-update"
						data-request-id=""
					>
						<div class="alert alert-info">
							Waiting for UI updates...
						</div>
					</div>
				</div>
			</div>
		</div>
		<script>
			// Decode HTML entities in pre/code blocks after SSE updates
			document.addEventListener('htmx:afterSwap', function(event) {
				document.querySelectorAll('pre code').forEach((el) => {
					// Replace HTML newline entities with actual newlines
					el.innerHTML = el.innerHTML.replace(/&#10;/g, '\n');
					// Re-highlight the code
					hljs.highlightElement(el);
				});
				
				// Extract request ID from the updated content if available
				const newRequestId = event.detail.target.querySelector('[data-request-id]')?.getAttribute('data-request-id');
				if (newRequestId) {
					// Update the parent container with the new request ID
					event.detail.target.closest('[data-request-id]')?.setAttribute('data-request-id', newRequestId);
					console.log('Updated request ID to:', newRequestId);
				}
			});
		</script>
	}
}
